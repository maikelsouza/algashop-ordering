plugins {
	id 'idea'
	id 'java'
	id 'org.springframework.boot' version '3.5.5'
	id 'io.spring.dependency-management' version '1.1.7'
    id 'org.springframework.cloud.contract' version '4.3.0'
}

group = 'com.algaworks.algashop'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
    mockitoAgent
}

repositories {
	mavenCentral()
}

ext {
    set('springCloudVersion', "2025.0.0")
}

dependencyManagement {
    imports {
        mavenBom "org.springframework.cloud:spring-cloud-dependencies:${springCloudVersion}"
    }
}


dependencies {
	implementation 'org.springframework.boot:spring-boot-starter-web'
    implementation 'commons-validator:commons-validator:1.9.0'
	implementation 'com.fasterxml.uuid:java-uuid-generator:5.1.0'
    implementation 'io.hypersistence:hypersistence-tsid:2.1.4'
    implementation 'org.springframework.boot:spring-boot-starter-data-jpa'
    implementation 'org.modelmapper:modelmapper:3.2.4'
    implementation 'org.springframework.boot:spring-boot-starter-validation'
    runtimeOnly 'com.h2database:h2'
	compileOnly 'org.projectlombok:lombok'
	annotationProcessor 'org.projectlombok:lombok'
    testImplementation 'org.springframework.cloud:spring-cloud-starter-contract-verifier'
    testImplementation 'io.rest-assured:rest-assured'
    testImplementation 'io.rest-assured:spring-mock-mvc'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	testImplementation 'org.assertj:assertj-core:3.27.3'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
    mockitoAgent('org.mockito:mockito-core:5.14.2') {transitive = false}
}

contracts {
    packageWithBaseClasses = "com.algaworks.algashop.ordering.contract.base"

}

tasks.named('contractTest') {
    useJUnitPlatform()
}

tasks.named('test') {
	useJUnitPlatform()
}

test{
    filter {
        excludeTestsMatching("*IT")
    }
    jvmArgs += "-javaagent:${configurations.mockitoAgent.asPath}"
}



tasks.named('check'){
    dependsOn(test, contractTest, integrationTest)
}

tasks.register('integrationTest', Test){
    description = 'Run integrations tests.'
    group = 'verification'
    jvmArgs += "-javaagent:${configurations.mockitoAgent.asPath}"

    testClassesDirs = sourceSets.test.output.classesDirs
    classpath = sourceSets.test.runtimeClasspath

    shouldRunAfter test

    useJUnitPlatform()

    testLogging {
        events "passed"
    }

    filter {
        includeTestsMatching "*IT"
        excludeTestsMatching "*Test"
    }
}
